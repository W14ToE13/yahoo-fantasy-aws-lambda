AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for yahoo-fantasy

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  ClientId:
    Type: String
    Description: the yahoo applicaiton client id
    Default: id
  ClientSecret:
    Type: String
    Description: the yahoo applicaiton client secrect
    Default: secrect
  AlternateDomainName:
    Type: String
    Description: The alternate domain name for the CloudFront distribution
    Default: fantasy.laohuang.org
  SSLCertificateArn:
    Type: String
    Description: The ARN of the existing SSL certificate
    Default: arn:aws:acm:us-east-1:711387121254:certificate/2e1c3799-2a39-4d43-906d-6fd5824344f7
  HostedZoneId:
    Type: String
    Description: The ID of the Route 53 hosted zone
    Default: Z00026602M1LG268PQ0LG

Resources:
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-static-website'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'StaticWebsiteBucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${StaticWebsiteBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Access Control for S3 Origin
        Name: !Sub '${AWS::StackName}-s3-origin-access-control'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4



  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt 'StaticWebsiteBucket.RegionalDomainName'
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
          - Id: ApiGatewayOrigin
            DomainName: !Sub '${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
          - PathPattern: '/login'
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
          - PathPattern: '/callback'
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
        ViewerCertificate:
          AcmCertificateArn: !Ref 'SSLCertificateArn'
          SslSupportMethod: sni-only
        Aliases:
          - !Ref 'AlternateDomainName'
        PriceClass: PriceClass_100
        Enabled: true
        DefaultRootObject: index.html

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'HostedZoneId'
      Name: !Ref 'AlternateDomainName'
      Type: A
      AliasTarget:
        DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID



  # IAM role for lambda functions
  LambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaLogging' # allow lambda functions to write logs to cloudwatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !GetAtt WebServerLogGroup.Arn
                  - !GetAtt LongRunningJobLogGroup.Arn
        - PolicyName: 'LambdaDynamoDBAccess' # allow lambda functions to access dynamodb tables
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'dynamodb:*'
                Resource: 
                  - !GetAtt UserSessionTable.Arn
                  - !GetAtt LongRunningJobTable.Arn
        - PolicyName: 'LambdaS3Access' # allow lambda functions to access s3 bucket /data folder
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: !Sub 'arn:aws:s3:::${StaticWebsiteBucket}'
              -
                Effect: Allow
                Action:
                  - 's3:*'
                Resource: !Sub 'arn:aws:s3:::${StaticWebsiteBucket}/data/*'
        - PolicyName: 'LambdaInvokeFunction' # allow lambda functions to invoke other lambda functions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'

  # log groups for lambda functions
  WebServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-web-server'
      RetentionInDays: 1
  LongRunningJobLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-task'
      RetentionInDays: 1

  
  # lambda functions
  WebServerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      FunctionName: !Sub ${AWS::StackName}-web-server
      Architectures:
        - x86_64
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          CLIENT_ID:  !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          DB_SESSION_TABLE: !Sub ${AWS::StackName}-session
          DB_TASK_TABLE: !Sub ${AWS::StackName}-task
          S3_BUCKET_NAME: !Ref StaticWebsiteBucket
          TASK_JOB_FUNCTION_NAME: !Ref LongRunningJobFunction
          BASE_URL: !Sub https://${AlternateDomainName}
      Role: !GetAtt LambdaExecRole.Arn
    Metadata:
      Dockerfile: Dockerfile_web_server
      DockerContext: ./src/
      DockerTag: !Sub ${AWS::StackName}-web-server
  
  LongRunningJobFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      FunctionName:  !Sub ${AWS::StackName}-task
      Architectures:
        - x86_64
      Environment:
        Variables:
          CLIENT_ID:  !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          DB_SESSION_TABLE: !Sub ${AWS::StackName}-session
          DB_TASK_TABLE: !Sub ${AWS::StackName}-task
          S3_BUCKET_NAME: !Ref StaticWebsiteBucket
          BASE_URL: !Sub https://${AlternateDomainName}
      Role: !GetAtt LambdaExecRole.Arn
    Metadata:
      Dockerfile: Dockerfile_long_running_job
      DockerContext: ./src/
      DockerTag: !Sub ${AWS::StackName}-task

  # dynamodb tables
  UserSessionTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: 'Retain'
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub '${AWS::StackName}-session'
      AttributeDefinitions:
        - AttributeType: 'S'
          AttributeName: 'sessionId'
      KeySchema:
        - KeyType: 'HASH'
          AttributeName: 'sessionId'
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: 'expireAt'

  LongRunningJobTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: 'Retain'
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub '${AWS::StackName}-task'
      AttributeDefinitions:
        - AttributeType: 'S'
          AttributeName: 'taskId'
      KeySchema:
        - KeyType: 'HASH'
          AttributeName: 'taskId'
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: 'expireAt'

Outputs:
  CloudFrontDistributionDomainName:
    Description: 'The domain name of the CloudFront distribution'
    Value: !GetAtt CloudFrontDistribution.DomainName

  StaticWebsiteBucketName:
    Description: 'The name of the S3 bucket hosting the static website'
    Value: !Ref StaticWebsiteBucket

  ApiGatewayInvokeURL:
    Description: 'The URL to invoke the API Gateway'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/'
